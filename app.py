import gradio as gr
import torch
from torchvision import models, transforms
import torch.nn.functional as F
from PIL import Image
import json
from google import genai
from google.genai import types
from dotenv import load_dotenv
import os

#loading the model
model = torch.load("resnet18_plant_disease (4).pth", map_location="cpu", weights_only=False)
model.eval()

#loading the label classes
with open("label_classes.json", "r") as f:
    id2label = json.load(f)

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406],
                         std=[0.229, 0.224, 0.225])
])

#calling gemini api for getting treatment
def get_remedy_from_gemini(disease_name):
    prompt = f"""
    You are a plant doctor. The disease identified is: "{disease_name}".
    Give only the following in simple terms, no headings or formatting:

    - A short description of the disease

    - Common symptoms

    - Natural or home remedies

    - Chemical treatments if needed

    - How to stop it from spreading

    - Special care tips

    Respond only with the content.
    """

    try:
        load_dotenv()
        GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
        client = genai.Client(api_key=GEMINI_API_KEY)
        response = client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt,
            config=types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(thinking_budget=0) ),)
        return response.text.strip()
    
    except Exception as e:
        return f"Error fetching remedy: {e}"

#predicting the user's image
def predict_image(image):
    image = image.convert("RGB")
    image = transform(image).unsqueeze(0)

    with torch.no_grad():
        outputs = model(image)
        probabilities = F.softmax(outputs, dim=1)
        confidence, predicted = torch.max(probabilities, 1)
        predicted_label = id2label[predicted.item()]
        score = confidence.item() * 100
        confidence_score = f"{confidence.item() * 100:.2f}%"

    remedy = get_remedy_from_gemini(predicted_label)
    
    if score < 65:
        message = f"The model isn't very confident in this result (Confidence: {confidence_score}). It’s recommended to double-check with another image for a better prediction or seek expert advice."
        remedy = message + "\n" + "\n" + remedy 
    
    return f"{predicted_label}", f"{confidence_score}", f"{remedy}"

#gradio interface
demo = gr.Interface(
    fn=predict_image,
    inputs=gr.Image(type="pil"),
    outputs=[
        gr.Textbox(label="Predicted Disease"),
        gr.Textbox(label="Model Confidence"),
        gr.Textbox(label="Suggested Remedy")
    ],
    title=
    """
    <div style='font-size: 29px; text-align: center;'>
    𝐀𝐈 𝐏𝐥𝐚𝐧𝐭 𝐃𝐨𝐜𝐭𝐨𝐫 𝐰𝐢𝐭𝐡 𝐑𝐞𝐦𝐞𝐝𝐢𝐞𝐬\n\n
    </div>
    """,
    description=
    """
    <div style='font-size: 24px; text-align: center;'>
        𝐔𝐩𝐥𝐨𝐚𝐝 𝐚 𝐩𝐥𝐚𝐧𝐭 𝐥𝐞𝐚𝐟 𝐢𝐦𝐚𝐠𝐞 𝐭𝐨 𝐝𝐞𝐭𝐞𝐜𝐭 𝐭𝐡𝐞 𝐝𝐢𝐬𝐞𝐚𝐬𝐞, 𝐯𝐢𝐞𝐰 𝐜𝐨𝐧𝐟𝐢𝐝𝐞𝐧𝐜𝐞 𝐥𝐞𝐯𝐞𝐥, 𝐚𝐧𝐝 𝐠𝐞𝐭 𝐀𝐈-𝐬𝐮𝐠𝐠𝐞𝐬𝐭𝐞𝐝 𝐫𝐞𝐦𝐞𝐝𝐢𝐞𝐬!
    </div>
    """,
    article=
    """
    <div style='font-size: 14px; color: #666; text-align: center; margin-top: 30px;'>
    <strong>Disclaimer</strong><br>
    This AI Plant Doctor is a student project created for educational purposes only.<br>
    Predictions and remedies are generated by AI and may not always be accurate.<br>
    Always consult a certified agricultural expert before acting on this information.
    </div>
    """
)

demo.launch()




